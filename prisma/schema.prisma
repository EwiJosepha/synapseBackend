// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                    @id @default(uuid()) @db.Uuid
  email                     String                    @unique
  name                      String                    @unique
  password                  String
  phoneNumber               String
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  sendMessages              Message[]                 @relation("SentMessages")
  receivedMessages          Message[]                 @relation("ReceivedMessages")
  conversationAsUser1       Conversation[]            @relation("User1")
  conveersationAsUser2      Conversation[]            @relation("User2")
  participatedConversations ConversationParticipant[]
  messageReactions          MessageReaction[]
  lastSeen                  DateTime?
  isOnline                  Boolean                   @default(false)

  @@index([email])
  @@index([name])
}

model Message {
  id             String            @id @default(uuid()) @db.Uuid
  senderId       String            @db.Uuid
  receiverId     String            @db.Uuid
  content        String
  timestamp      DateTime          @default(now())
  isRead         Boolean           @default(false)
  sender         User              @relation("SentMessages", fields: [senderId], references: [id])
  receiver       User              @relation("ReceivedMessages", fields: [receiverId], references: [id])
  coversation    Conversation      @relation(fields: [conversationId], references: [id])
  conversationId String            @db.Uuid
  status         MessageStatus     @default(SENT)
  reactions      MessageReaction[]
  attachements   FileAttachment[]

  @@index([senderId])
  @@index([receiverId])
  @@index([timestamp])
  @@index([isRead])
}

model Conversation {
  id           String                    @id @default(uuid()) @db.Uuid
  user1Id      String                    @db.Uuid
  user2Id      String                    @db.Uuid
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  user1        User                      @relation("User1", fields: [user1Id], references: [id])
  user2        User                      @relation("User2", fields: [user2Id], references: [id])
  messages     Message[]
  participants ConversationParticipant[]

  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
}

model ConversationParticipant {
  conversationId String       @db.Uuid
  userId         String       @db.Uuid
  jointAt        DateTime     @default(now())
  leftAt         DateTime?
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@id([conversationId, userId])
}

model MessageReaction {
  id        String   @id @default(uuid()) @db.Uuid
  messageId String   @db.Uuid
  userId    String   @db.Uuid
  reaction  String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([messageId, userId])
}

model FileAttachment {
  id        String   @id @default(uuid())
  messageId String   @db.Uuid
  fileName  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}
